'use strict';


// const ask = (question, yes, no) => (confirm(question) ? yes() : no());

// ask('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?', () => alert('–í—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å–∏—å'),
//   () => alert('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'));


// alert('–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∂–¥–∏—Ç–µ –æ—à–∏–±–∫—É');

// [1, 2].forEach(alert);



const salaries = {
  John: 100,
  Ann: 160,
  Pete: 130,
};
let sum = 0;
for (const key in salaries) {
  sum += salaries[key];
}
console.log(sum);
sum = 0;


//Object.values() - –•—Ä–∞–Ω–∏—Ç –¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞
//–¢–æ—Ç –∂–µ –ø—Ä–∏–º–µ—Ä —Å —ç—Ç–∏–º —Å–≤–æ–π—Å—Ç–≤–æ–º
for (const salary  of Object.values(salaries)) {
  sum += salary;
}
console.log(sum);
//–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ, –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å reduce
//–¢–æ—Ç –∂–µ –ø—Ä–∏–º–µ—Ä —Å reduce

sum = 0;

sum  = Object.values(salaries).reduce((acum, cur) => acum + cur);
console.log(sum);



const menu = {
  width: 200,
  height: 300,
  title: 'My menu',
};


function multiplyNumeric(obj) {
  for (const key in obj) {
    if (typeof obj[key] === 'number') {
      obj[key] *= 2;
    }
  }
}

multiplyNumeric(menu);
console.dir(menu);

const id = Symbol('id');
console.log(id.toString());
console.log(id.description);


//4.8 –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—Ä–∏–º–∏—Ç–∏–≤—ã

// function Person(name, age) {

//   this.name = name;
//   this.age = age;
//   this[Symbol.toPrimitive] = hint => {
//     //hint: 'string' , 'nuber', 'default';
//     if (hint === 'string') return  `Hello, ${this.name}`;
//     return this.age;
//   };
// }

// const Dave = new Person('Dave', 20);
// const Mike = new Person('Mike', 30);
// console.log(Dave + Mike); //50
// console.log(String(Dave)); // Hello, Dave

//–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

// const str = '–ü—Ä–∏–≤–µ—Ç';

// console.log(str.test = 5); // (*)

console.log(1.35.toFixed(1));


const str = 'Widget';

if (~str.indexOf('Widget')) { // -1
  console.log('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å'); // —Ä–∞–±–æ—Ç–∞–µ—Ç
}
if (~str.indexOf('Widgett')) { //0
  console.log('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å'); //–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
}

console.log('AB'.codePointAt(1));
//–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É

const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
console.log(arr[Math.floor(arr.length / 2)]);
console.log(arr[Math.floor((arr.length - 1) / 2)]);




//–ü–µ—Ä–µ–±–µ—Ä–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
// {
//   const range = {
//     from: 1,
//     to: 5,
//     [Symbol.iterator]() {
//       return {
//         current: this.from,
//         last: this.to,
//         next() {
//           if (this.current <= this.last) {
//             return { done: false, value: this.current++ };
//           } else { return { done: true }; }
//         }
//       };
//     }
//   };
//   for (const num of range) {
//     console.log(num);
//   }
// }


//–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∞–º–æ–º—É


// const range = {
//   from: 1,
//   to: 5,
//   [Symbol.iterator]() {
//     return {
//       current: this.from,
//       last: this.to,
//       next() {
//         if (this.current <= this.last) {
//           return { done: false, value: this.current++ };
//         } else { return { done: true }; }
//       }
//     };
//   }
// };

// for (const num of range) {
//   console.log(num);
// }


//–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Ç—Ä–µ–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∞–º–æ–º–æ –æ–±—ä–µ–∫—Ç–µ
// {
//   const range = {
//     from: 1,
//     to: 5,
//     [Symbol.iterator]() {
//       this.current = this.from;
//       return this;
//     },
//     next() {
//       if (this.current <= this.to) {
//         return { done: false, value: this.current++ };
//       } else {
//         return { done: true };
//       }
//     }
//   };

//   for (const num of range) {
//     console.log(num);
//   }
// }


//–Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞

// {
//   const str = 'Hello';
//   const iterator = str[Symbol.iterator]();
//   while (true) {
//     const Result = iterator.next();
//     if (Result.done) break;
//     console.log(Result.value);
//   }

// }


// const arr2 = Array.from(range);
// console.log(arr2);

// const str2 = 'ùí≥üòÇ©∑∂';
// function slice(str, start, end) {
//   return Array.from(str).slice(start, end).join('');
// }
// console.log(str2.slice(1, 3));
// console.log(slice(str2, 1, 3));




const range = {
  from: 1,
  to: 5,

  [Symbol.iterator]() {
    this.current = this.from;
    return this;
  },

  next() {
    if (this.current <= this.to) {
      return { done: false, value: this.current++ };
    } else {
      return { done: true };
    }
  }
};

for (const values of range) {
  console.log(values);
  console.log(range.current);
}


const objtest = {
  // a: 13,
  // b: 10,
  c() { console.log('Hi'); },
  d() {},

  // [Symbol.iterator]() {
  //   return {

  //   };
  // }
};


for (const value of Object.values(objtest)) {
  console.log(value);
}
